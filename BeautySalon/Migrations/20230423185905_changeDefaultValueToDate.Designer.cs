// <auto-generated />
using System;
using BeautySalon.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeautySalon.Migrations
{
    [DbContext(typeof(BeautysalonContext))]
    [Migration("20230423185905_changeDefaultValueToDate")]
    partial class changeDefaultValueToDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeautySalon.Data.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("numeric")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("clients_pkey");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("numeric")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("employees_pkey");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("positions_pkey");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<long?>("Empid")
                        .HasColumnType("bigint")
                        .HasColumnName("empid");

                    b.Property<char>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("schedules_pkey");

                    b.HasIndex("Empid");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("character varying")
                        .HasColumnName("about");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("Posid")
                        .HasColumnType("bigint")
                        .HasColumnName("posid");

                    b.HasKey("Id")
                        .HasName("services_pkey");

                    b.HasIndex("Posid");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Serviceprovision", b =>
                {
                    b.Property<long>("Cliid")
                        .HasColumnType("bigint")
                        .HasColumnName("attid");

                    b.Property<long>("Serid")
                        .HasColumnType("bigint")
                        .HasColumnName("serid");

                    b.Property<long?>("Schid")
                        .HasColumnType("bigint")
                        .HasColumnName("schid");

                    b.HasKey("Cliid", "Serid")
                        .HasName("pkserprov");

                    b.HasIndex("Schid");

                    b.HasIndex("Serid");

                    b.ToTable("serviceprovisions", (string)null);
                });

            modelBuilder.Entity("Employeesonposition", b =>
                {
                    b.Property<long>("Empid")
                        .HasColumnType("bigint")
                        .HasColumnName("empid");

                    b.Property<long>("Posid")
                        .HasColumnType("bigint")
                        .HasColumnName("posid");

                    b.HasKey("Empid", "Posid")
                        .HasName("pkemponposid");

                    b.HasIndex("Posid");

                    b.ToTable("employeesonpositions", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Schedule", b =>
                {
                    b.HasOne("BeautySalon.Data.Models.Employee", "Emp")
                        .WithMany("Schedules")
                        .HasForeignKey("Empid")
                        .HasConstraintName("schedules_empid_fkey");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Service", b =>
                {
                    b.HasOne("BeautySalon.Data.Models.Position", "Pos")
                        .WithMany("Services")
                        .HasForeignKey("Posid")
                        .HasConstraintName("services_posid_fkey");

                    b.Navigation("Pos");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Serviceprovision", b =>
                {
                    b.HasOne("BeautySalon.Data.Models.Client", "Cli")
                        .WithMany("Serviceprovisions")
                        .HasForeignKey("Cliid")
                        .IsRequired()
                        .HasConstraintName("fkcliid");

                    b.HasOne("BeautySalon.Data.Models.Schedule", "Sch")
                        .WithMany("Serviceprovisions")
                        .HasForeignKey("Schid")
                        .HasConstraintName("fkschid");

                    b.HasOne("BeautySalon.Data.Models.Service", "Ser")
                        .WithMany("Serviceprovisions")
                        .HasForeignKey("Serid")
                        .IsRequired()
                        .HasConstraintName("fkserid");

                    b.Navigation("Cli");

                    b.Navigation("Sch");

                    b.Navigation("Ser");
                });

            modelBuilder.Entity("Employeesonposition", b =>
                {
                    b.HasOne("BeautySalon.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("Empid")
                        .IsRequired()
                        .HasConstraintName("fkempid");

                    b.HasOne("BeautySalon.Data.Models.Position", null)
                        .WithMany()
                        .HasForeignKey("Posid")
                        .IsRequired()
                        .HasConstraintName("fkposid");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Client", b =>
                {
                    b.Navigation("Serviceprovisions");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Employee", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Position", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Schedule", b =>
                {
                    b.Navigation("Serviceprovisions");
                });

            modelBuilder.Entity("BeautySalon.Data.Models.Service", b =>
                {
                    b.Navigation("Serviceprovisions");
                });
#pragma warning restore 612, 618
        }
    }
}
